import os
import sys
import dj_database_url
# Purpose: step-by-step debug prints so we can tell exactly what succeeds/fails
import importlib
import traceback
import inspect
if os.path.isfile('env.py'):
    import env

"""
Django settings for art_flight project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    'art-flight-90b83d1ec001.herokuapp.com',
    ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'home',
    'artists',
    'user_profile',
    'bag',
    'checkout',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'art_flight.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates', 'allauth'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'bag.contexts.bag_contents',
            ],
        },
    },
]

CSRF_TRUSTED_ORIGINS = [
    'http://8000-connorfridayc-artflight-xaa8drxsjmk.ws-eu117.gitpod.io',
    'https://8000-connorfridayc-artflight-xaa8drxsjmk.ws-eu117.gitpod.io',
]

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
)

SITE_ID = 1

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
ACCOUNT_USERNAME_MIN_LENGTH = 4
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'

WSGI_APPLICATION = 'art_flight.wsgi.application'


# Database
if 'DATABASE_URL' in os.environ:
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.'
                'NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_LOCATION = 'static'
MEDIAFILES_LOCATION = 'media'

FREE_DELIVERY_THRESHOLD = 20
STANDARD_DELIVERY_PERCENTAGE = 10

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ---------- BEGIN S3 DEBUG BLOCK ----------

if os.environ.get('USE_AWS'):
    print(">>> [DEBUG] USE_AWS is set. Configuring S3...")

    # Basic bucket + region (these are safe to print)
    AWS_STORAGE_BUCKET_NAME = 'art-flight-90b83d1ec001'
    AWS_S3_REGION_NAME = 'eu-north-1'
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    print(f">>> [DEBUG] Bucket: {AWS_STORAGE_BUCKET_NAME}")
    print(f">>> [DEBUG] Region: {AWS_S3_REGION_NAME}")

    # Credentials: DO NOT print values, only whether they exist
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    print(">>> [DEBUG] AWS_ACCESS_KEY_ID present?:", bool(AWS_ACCESS_KEY_ID))
    print(">>> [DEBUG] AWS_SECRET_ACCESS_KEY present?:", bool(AWS_SECRET_ACCESS_KEY))

    # Locations used by your storage classes
    STATICFILES_LOCATION = 'static'
    MEDIAFILES_LOCATION = 'media'
    print(f">>> [DEBUG] STATICFILES_LOCATION = {STATICFILES_LOCATION!r}")
    print(f">>> [DEBUG] MEDIAFILES_LOCATION = {MEDIAFILES_LOCATION!r}")

    # Environment / filesystem context (helpful for import resolution)
    print(">>> [DEBUG] sys.path =", sys.path)
    print(">>> [DEBUG] CWD =", os.getcwd())

    # --- Try importing custom_storages using multiple paths ---
    # Sometimes module path should include the app package (art_flight.custom_storages).
    tried_paths = ['custom_storages', 'art_flight.custom_storages']
    imported_mod = None
    for mpath in tried_paths:
        try:
            m = importlib.import_module(mpath)
            print(f">>> [DEBUG] Imported module '{mpath}' -> {m}")
            # Check whether expected classes exist
            has_static = hasattr(m, 'StaticStorage')
            has_media = hasattr(m, 'MediaStorage')
            print(f">>> [DEBUG] Module '{mpath}' has StaticStorage?: {has_static}, MediaStorage?: {has_media}")
            if has_static:
                cls = getattr(m, 'StaticStorage')
                print(f">>> [DEBUG] StaticStorage is a class?: {inspect.isclass(cls)}")
                # try to verify it's a subclass of S3Boto3Storage (if importable)
                try:
                    from storages.backends.s3boto3 import S3Boto3Storage
                    is_sub = issubclass(cls, S3Boto3Storage)
                    print(f">>> [DEBUG] StaticStorage subclass of S3Boto3Storage?: {is_sub}")
                except Exception as e:
                    print(">>> [DEBUG] Could not import/compare S3Boto3Storage:", e)
            imported_mod = m
            # stop on first successful import
            break
        except Exception as e:
            print(f">>> [DEBUG] Import failed for '{mpath}': {e}")
            traceback.print_exc()

    if not imported_mod:
        print(">>> [DEBUG] Could not import custom_storages using any tested module path. CHECK FILE LOCATION AND REPO.")
    else:
        print(">>> [DEBUG] custom_storages import appears OK from build-time check.")

    # Recommend using fully-qualified module path for STATICFILES_STORAGE to avoid ambiguity.
    # You can temporarily override the exact string via env var STATICFILES_STORAGE_OVERRIDE
    STATICFILES_STORAGE = "custom_storages.StaticStorage"
    DEFAULT_FILE_STORAGE = "custom_storages.MediaStorage"

    print(f">>> [DEBUG] STATICFILES_STORAGE (setting) = {STATICFILES_STORAGE}")
    print(f">>> [DEBUG] DEFAULT_FILE_STORAGE (setting) = {DEFAULT_FILE_STORAGE}")

    # Construct public URLs for static/media (safe to print)
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/'
    print(f">>> [DEBUG] STATIC_URL = {STATIC_URL}")
    print(f">>> [DEBUG] MEDIA_URL = {MEDIA_URL}")

    # Optional strict check: set AWS_STRICT=1 to raise if the final backend is not a subclass of S3Boto3Storage
    if os.environ.get('AWS_STRICT') == '1':
        print(">>> [DEBUG] AWS_STRICT enabled: verifying STATICFILES_STORAGE resolves to S3Boto3Storage subclass")
        try:
            mod_name, cls_name = STATICFILES_STORAGE.rsplit('.', 1)
            mod = importlib.import_module(mod_name)
            cls = getattr(mod, cls_name)
            from storages.backends.s3boto3 import S3Boto3Storage
            if not issubclass(cls, S3Boto3Storage):
                raise RuntimeError("STATICFILES_STORAGE backend is not a subclass of S3Boto3Storage")
            print(">>> [DEBUG] AWS_STRICT check passed: backend is S3Boto3Storage subclass")
        except Exception as e:
            print(">>> [DEBUG] AWS_STRICT check failed:", e)
            traceback.print_exc()
            # Re-raise to fail early (comment out if you don't want deploy to fail)
            raise
else:
    print(">>> [DEBUG] USE_AWS not set. Using local static/media.")
# ---------- END S3 DEBUG BLOCK ----------

# stripe
FREE_DELIVERY_THRESHOLD = 20
STANDARD_DELIVERY_PERCENTAGE = 10
STRIPE_CURRENCY = 'gbp'
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY', '')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', '')
STRIPE_WH_SECRET = os.getenv('STRIPE_WH_SECRET', '')
DEFAULT_FROM_EMAIL = 'artflight@example.com'
